/*=========================================================================

  Program: GDCM (Grassroots DICOM). A DICOM library

  Copyright (c) 2006-2011 Mathieu Malaterre
  All rights reserved.
  See Copyright.txt or http://gdcm.sourceforge.net/Copyright.html for details.

     This software is distributed WITHOUT ANY WARRANTY; without even
     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
     PURPOSE.  See the above copyright notice for more information.

=========================================================================*/
#include "gdcmReader.h"
#include "gdcmMediaStorage.h"
#include "gdcmWriter.h"
#include "gdcmItem.h"
#include "gdcmImageReader.h"
#include "gdcmAttribute.h"
#include "gdcmFile.h"
#include "gdcmTag.h"
#include "gdcmTransferSyntax.h"
#include "gdcmUIDGenerator.h"
#include "gdcmAnonymizer.h"


int main(int, char *[])
{
  //Fake Image
  gdcm::SmartPointer<gdcm::Image> im = new gdcm::Image;

  char * buffer = new char[ 256 * 256 * 3 * 3];
  char * p = buffer;
  

  int ybr[3];
  int ybr2[3];
  int rgb[3];

 for(int i=0; i< 3 ;++i)
  for(int row = 0; row < 256; ++row)
    for(int col = 0; col < 256; ++col)
      //for(int b = 0; b < 256; ++b)
      {
      
     if(i==0)
     {
      ybr2[0] = 255;
      ybr2[1] = 0;
      ybr2[2] = 0;
     }
     else if(i==1)
     {
      ybr2[0] = 0;
      ybr2[1] = 255;
      ybr2[2] = 0;
     }

    else
     {
      ybr2[0] = 0;
      ybr2[1] = 0;
      ybr2[2] = 255;
     }
 
       //gdcm::ImageChangePhotometricInterpretation::YBR2RGB(rgb, ybr);
      //gdcm::ImageChangePhotometricInterpretation::RGB2YBR(ybr2, rgb);
      *p++ = ybr2[0];
      *p++ = ybr2[1];
      *p++ = ybr2[2];

      }

  gdcm::Writer w;
  gdcm::File &file = w.GetFile();
  gdcm::DataSet &ds = file.GetDataSet();
  
  file.GetHeader().SetDataSetTransferSyntax( gdcm::TransferSyntax::ImplicitVRLittleEndian );
    

  gdcm::UIDGenerator uid;
  gdcm::DataElement de( gdcm::Tag(0x8,0x18) ); // SOP Instance UID
  de.SetVR( gdcm::VR::UI );
  const char *u = uid.Generate();
  de.SetByteValue( u, strlen(u) );
  ds.Insert( de );

  de.SetTag( gdcm::Tag(0x8,0x16) ); // SOP Class UID
  de.SetVR( gdcm::VR::UI );
  gdcm::MediaStorage ms( gdcm::MediaStorage::RawDataStorage );
  de.SetByteValue( ms.GetString(), strlen(ms.GetString()));
  ds.Insert( de );

  const char mystr[] = "MONOCHROME2";
  de.SetTag(gdcm::Tag(0x28,0x04));
  de.SetVR( gdcm::VR::CS );
  de.SetByteValue(mystr, strlen(mystr));
  ds.Insert( de );

   gdcm::Attribute<0x0028,0x0010> row = {256};
   //row.SetValue(512);
   ds.Insert( row.GetAsDataElement() );
 //  w.SetCheckFileMetaInformation( true );
   gdcm::Attribute<0x0028,0x0011> col = {256};
   ds.Insert( col.GetAsDataElement() );
  
   gdcm::Attribute<0x0028,0x0008> Number_Of_Frames = {1};
   ds.Insert( Number_Of_Frames.GetAsDataElement() );

   gdcm::Attribute<0x0028,0x0100> at = {8};
   ds.Insert( at.GetAsDataElement() );

   gdcm::Attribute<0x0028,0x0002> at1 = {1};
   ds.Insert( at1.GetAsDataElement() );

  gdcm::Attribute<0x0028,0x0101> at2 = {8};
   ds.Insert( at2.GetAsDataElement() );

  gdcm::Attribute<0x0028,0x0102> at3 = {7};
   ds.Insert( at3.GetAsDataElement() );
 
 de.SetTag(gdcm::Tag(0x7fe0,0x0010));
 ds.Insert(de);

  gdcm::ImageReader theImageReaderOriginal;
  gdcm::ImageReader theImageReader;
  gdcm::StreamImageWriter theStreamWriter;






/*  im->SetNumberOfDimensions( 3 );
  im->SetDimension(0, 256 );
  im->SetDimension(1, 256 );
  im->SetDimension(2, 1 );

  im->GetPixelFormat().SetSamplesPerPixel(3);
  //im->SetPhotometricInterpretation( gdcm::PhotometricInterpretation::RGB );
  im->SetPhotometricInterpretation( gdcm::PhotometricInterpretation::RGB);

  unsigned long l = im->GetBufferLength();
  if( l != 256 * 256 * 1 * 1 )
    {
    return 1;
    }
 
  unsigned long len = 256*256;

  gdcm::DataElement pixeldata( gdcm::Tag(0x7fe0,0x0010) );
  pixeldata.SetVR( gdcm::VR::OB );
  gdcm::SmartPointer<gdcm::SequenceOfFragments> sq = new gdcm::SequenceOfFragments;
  gdcm::ImageWriter w;
  unsigned long prevlen = 0;

 //for (int i =1; i<=1; ++i)
 //{
    char* finalBuffer = new char[len];
    memcpy(finalBuffer, &(buffer[prevlen]), len);
    gdcm::Fragment frag;
    frag.SetByteValue( finalBuffer, len );
    sq->AddFragment( frag );
    pixeldata.SetValue( *sq );
    

 // pixeldata.SetByteValue( finalBuffer, len );
  //delete[] buffer;
  im->SetDataElement( pixeldata );
 
 

  // Set the filename:
 
   prevlen = prevlen + len;
  
//}
*/
   // w.SetImage( *im );
   w.SetFileName( "output.dcm" );
  if( !w.Write() )
    {
     std::cout << "NOt possible";
    return 1;
    }

  return 0;
}
